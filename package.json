const fs = require('fs');
const path = require('path');
const handlebars = require('handlebars');
const { getBrowserInstance, cleanup } = require('./puppeteerManager');

async function generatePdf(data) {
  let browserInstance, page;

  try {
    const templatePath = findTemplatePath();
    const templateContent = fs.readFileSync(templatePath, 'utf8');
    const template = handlebars.compile(templateContent);
    const htmlContent = template(data);

    browserInstance = await getBrowserInstance();
    page = await browserInstance.newPage();

    await page.setContent(htmlContent, {
      waitUntil: ['networkidle0', 'domcontentloaded'],
      timeout: 30000
    });
    console.log('Content set on page');

    // Generate PDF with A4 format
    const pdfBuffer = await page.pdf({
      format: 'A4',
      margin: {
        top: '20mm',
        right: '20mm',
        bottom: '20mm',
        left: '20mm'
      },
      printBackground: true,
      preferCSSPageSize: true,
      timeout: 30000
    });

    console.log(`PDF generated successfully, size: ${pdfBuffer.length} bytes`);
    return pdfBuffer;

  } catch (error) {
    console.error('PDF generation error:', error);
    console.error('Stack trace:', error.stack);
    if (error.message && error.message.includes('executable')) {
      console.error(
        'Hint: Chrome/Chromium may not be installed or PUPPETEER_EXECUTABLE_PATH is incorrect.'
      );
    }
    throw new Error(`PDF generation failed: ${error.message}`);
  } finally {
    // Cleanup resources
    await cleanup(page, browserInstance);
  }
}

/**
 * Find template file in various possible locations
 */
function findTemplatePath() {
  const possiblePaths = [
    path.join(__dirname, '..', 'templates', 'cert.hbs'),
    path.join(__dirname, 'templates', 'cert.hbs'),
    path.join(process.cwd(), 'templates', 'cert.hbs'),
    path.join(process.cwd(), 'backend', 'templates', 'cert.hbs'),
    path.join(process.cwd(), 'src', 'backend', 'templates', 'cert.hbs')
  ];

  for (const templatePath of possiblePaths) {
    if (fs.existsSync(templatePath)) {
      return templatePath;
    }
  }

  throw new Error('Template file not found in expected locations');
}

module.exports = {
  generatePdf
};
